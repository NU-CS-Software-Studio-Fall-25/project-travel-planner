class Api::V1::TravelRecommendationsController < Api::V1::BaseController
  
  # GET /api/v1/travel_recommendations
  def index
    @recommendations = Recommendation.includes(:user, :destination).recent.limit(20)
    
    # Filter by user if specified
    @recommendations = @recommendations.where(user_id: params[:user_id]) if params[:user_id].present?
    
    render_success(@recommendations.as_json(include: [:user, :destination]))
  end

  # GET /api/v1/travel_recommendations/1
  def show
    @recommendation = Recommendation.includes(:user, :destination).find(params[:id])
    render_success(@recommendation.as_json(include: [:user, :destination]))
  rescue ActiveRecord::RecordNotFound
    render_not_found("Recommendation not found")
  end

  # POST /api/v1/travel_recommendations
  def create
    # This will generate recommendations based on user preferences
    user_id = params[:user_id]
    user = User.find(user_id)
    
    if user.nil?
      render_error("User not found")
      return
    end

    # Get user preferences
    preferences = {
      passport_country: user.passport_country,
      budget_min: user.budget_min,
      budget_max: user.budget_max,
      preferred_season: user.preferred_travel_season,
      safety_preference: user.safety_preference
    }

    # Filter destinations based on user preferences
    suitable_destinations = filter_destinations(preferences)
    
    if suitable_destinations.empty?
      render_error("No suitable destinations found for your preferences")
      return
    end

    # Generate recommendations (for now, we'll create simple recommendations)
    # Later this will integrate with OpenAI API
    recommendations = generate_recommendations(user, suitable_destinations)
    
    render_success(recommendations, "Recommendations generated successfully")
    
  rescue ActiveRecord::RecordNotFound
    render_not_found("User not found")
  rescue => e
    render_error("Error generating recommendations: #{e.message}")
  end

  private

  def filter_destinations(preferences)
    destinations = Destination.all
    
    # Filter by safety score
    destinations = destinations.safe_destinations(preferences[:safety_preference]) if preferences[:safety_preference]
    
    # Filter by budget (average cost)
    if preferences[:budget_min] && preferences[:budget_max]
      destinations = destinations.where(
        'average_cost >= ? AND average_cost <= ?', 
        preferences[:budget_min], 
        preferences[:budget_max]
      )
    end
    
    # Filter by season
    destinations = destinations.by_season(preferences[:preferred_season]) if preferences[:preferred_season]
    
    destinations.limit(10)
  end

  def generate_recommendations(user, destinations)
    recommendations = []
    
    destinations.each do |destination|
      # Calculate a simple recommendation score (0-10)
      score = calculate_recommendation_score(user, destination)
      
      # Create or find recommendation record
      recommendation = Recommendation.find_or_create_by(
        user: user,
        destination: destination
      ) do |rec|
        rec.recommendation_score = score
        rec.reasons = generate_reasons(user, destination)
        rec.openai_response = "Generated by simple algorithm (OpenAI integration pending)"
      end
      
      recommendations << recommendation.as_json(include: [:destination])
    end
    
    recommendations.sort_by { |r| -r['recommendation_score'] }
  end

  def calculate_recommendation_score(user, destination)
    score = 5.0 # Base score
    
    # Boost score based on safety alignment
    if destination.safety_score >= user.safety_preference
      score += 2.0
    end
    
    # Boost score if within budget
    if user.budget_min && user.budget_max
      if destination.average_cost >= user.budget_min && destination.average_cost <= user.budget_max
        score += 1.5
      end
    end
    
    # Boost score for season match
    if destination.best_season == user.preferred_travel_season
      score += 1.0
    end
    
    # Add some randomness for variety
    score += rand(-0.5..0.5)
    
    # Ensure score is between 0 and 10
    [[score, 0].max, 10].min.round(1)
  end

  def generate_reasons(user, destination)
    reasons = []
    
    reasons << "Safety score (#{destination.safety_score}/10) meets your preference (#{user.safety_preference}/10)" if destination.safety_score >= user.safety_preference
    
    if user.budget_min && user.budget_max && destination.average_cost
      if destination.average_cost >= user.budget_min && destination.average_cost <= user.budget_max
        reasons << "Average cost ($#{destination.average_cost}) fits your budget ($#{user.budget_min}-$#{user.budget_max})"
      end
    end
    
    reasons << "Best season (#{destination.best_season}) matches your preference (#{user.preferred_travel_season})" if destination.best_season == user.preferred_travel_season
    
    reasons << "No visa required" unless destination.visa_required
    
    reasons.join("; ")
  end
end