<%# app/views/travel_recommendations/index.html.erb %>
<% content_for :title, "Get Travel Recommendations" %>

<div class="container my-4">
  <h1 class="mb-4">Plan a New Trip</h1>

  <%# Flash message for showing cached recommendations %>
  <% if flash[:info] %>
    <div class="alert alert-info alert-dismissible fade show" role="alert">
      <svg class="me-2" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
      </svg>
      <strong>Previous Recommendations:</strong> <%= flash[:info] %>
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  <% end %>

  <%# Form for submitting travel preferences %>
  <div class="card mb-5 shadow-sm">
    <div class="card-header">
      <h5 class="mb-0">Your Trip Preferences</h5>
    </div>
    <div class="card-body">
      <%= form_with(model: @travel_plan || TravelPlan.new, url: travel_recommendations_path, method: :post, id: "recommendation-form") do |f| %>
        <div class="row g-3">
          <div class="col-md-6">
            <%= f.label :name, "Trip Name", class: "form-label" %>
            <%= f.text_field :name, class: "form-control", placeholder: "e.g., Thanksgiving Getaway" %>
          </div>
          <div class="col-md-6">
            <%= f.label :passport_country, "Passport/Citizenship Country", class: "form-label" %>
            <%= f.select :passport_country, 
                options_for_select(@countries, @travel_plan.passport_country), 
                { prompt: "Select your country" }, 
                class: "form-select" %>
          </div>
          
          <div class="col-md-6">
            <%= f.label :current_location, "Current Location", class: "form-label" %>
            <span class="text-danger">*</span>
            <%= f.text_field :current_location, class: "form-control", placeholder: "e.g., Chicago, Illinois", required: true %>
            <small class="text-muted">Where are you traveling from?</small>
          </div>
          
          <!-- Date Range Fields -->
          <div class="col-md-3">
            <%= f.label :start_date, "Start Date", class: "form-label" %>
            <span class="text-danger">*</span>
            <%= f.date_field :start_date, class: "form-control", id: "start_date", min: Date.today, required: true %>
            <small class="text-muted">Trip start date</small>
          </div>
          <div class="col-md-3">
            <%= f.label :end_date, "End Date", class: "form-label" %>
            <span class="text-danger">*</span>
            <%= f.date_field :end_date, class: "form-control", id: "end_date", min: Date.today, required: true %>
            <small class="text-muted">Trip end date</small>
          </div>
          
          <div class="col-md-3">
            <%= f.label :budget_min, "Min Budget ($)", class: "form-label" %>
            <%= f.number_field :budget_min, class: "form-control", step: 100 %>
          </div>
          <div class="col-md-3">
            <%= f.label :budget_max, "Max Budget ($)", class: "form-label" %>
            <%= f.number_field :budget_max, class: "form-control", step: 100 %>
          </div>
          
          <div class="col-md-6">
            <%= f.label :travel_style, class: "form-label" %>
            <%= f.select :travel_style, ["Adventure", "Leisure", "Luxury", "Backpacking"], {}, class: "form-select", id: "travel_style" %>
          </div>
          
          <!-- Safety Preference with GPI Integration -->
          <div class="col-md-6">
            <%= f.label :safety_preference, "Acceptable Safety Levels", class: "form-label" %>
            <span class="text-danger">*</span>
            <%= f.select :safety_preference, 
                [
                  ["Level 1 - Safe Destinations (Exercise normal precautions)", "Very Safe"], 
                  ["Level 2 - Moderate Caution (Exercise increased caution)", "Generally Safe"], 
                  ["Level 3 - High Risk (Reconsider travel)", "Partly Safe"], 
                  ["Level 4 - Extreme Risk (Do not travel, Adventure style only)", "Not Safe"]
                ], 
                { prompt: "Select safety level" }, 
                class: "form-select", 
                required: true %>
            <small class="text-muted">
              <svg width="14" height="14" fill="currentColor" class="bi bi-shield-check" viewBox="0 0 16 16">
                <path d="M5.338 1.59a61.44 61.44 0 0 0-2.837.856.481.481 0 0 0-.328.39c-.554 4.157.726 7.19 2.253 9.188a10.725 10.725 0 0 0 2.287 2.233c.346.244.652.42.893.533.12.057.218.095.293.118a.55.55 0 0 0 .101.025.615.615 0 0 0 .1-.025c.076-.023.174-.061.294-.118.24-.113.547-.29.893-.533a10.726 10.726 0 0 0 2.287-2.233c1.527-1.997 2.807-5.031 2.253-9.188a.48.48 0 0 0-.328-.39c-.651-.213-1.75-.56-2.837-.855C9.552 1.29 8.531 1.067 8 1.067c-.53 0-1.552.223-2.662.524zM5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.775 11.775 0 0 1-2.517 2.453 7.159 7.159 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7.158 7.158 0 0 1-1.048-.625 11.777 11.777 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43 62.456 62.456 0 0 1 5.072.56z"/>
                <path d="M10.854 5.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 7.793l2.646-2.647a.5.5 0 0 1 .708 0z"/>
              </svg>
              Based on 2025 Global Peace Index data from Institute for Economics & Peace
            </small>
          </div>
          
          <div class="col-md-6">
            <%= f.label :trip_scope, class: "form-label" %>
            <%= f.select :trip_scope, ["International", "Domestic"], {}, class: "form-select" %>
          </div>
          <div class="col-md-6">
            <%= f.label :trip_type, class: "form-label" %>
            <%= f.select :trip_type, ["Solo", "Couple", "Family", "Group"], {}, class: "form-select" %>
          </div>
          
          <div class="col-12">
            <%= f.label :general_purpose, "Purpose of Trip (Optional)", class: "form-label" %>
            <%= f.text_area :general_purpose, class: "form-control", rows: 3, placeholder: "e.g., I want to relax during Thanksgiving break, preferably somewhere in Japan or South Korea. I love hot springs and nature." %>
            <small class="text-muted"><strong>Optional but recommended:</strong> Mention any countries, cities, activities, or experiences you're interested in. This helps us provide better personalized recommendations.</small>
          </div>
        </div>
        <div class="mt-4 text-center">
          <%= f.submit "Get Recommendations", class: "btn btn-success btn-lg" %>
        </div>
      <% end %>
    </div>
  </div>

  <%# Render the recommendations partial inside the Turbo Frame %>
  <%= render 'recommendations_list', recommendations: @recommendations %>
</div>

<%# The JavaScript for saving form state and validation logic %>
<script>
    document.addEventListener('turbo:load', () => {
        const form = document.getElementById('recommendation-form');
        if (!form) return;

        const storageKey = 'recommendationFormData';
        const startDateInput = document.getElementById('start_date');
        const endDateInput = document.getElementById('end_date');
        const travelStyleSelect = document.getElementById('travel_style');
        const safetyPreferenceSelect = document.querySelector('select[name="travel_plan[safety_preference]"]');

        // Date validation logic
        if (startDateInput && endDateInput) {
            startDateInput.addEventListener('change', function() {
                const startDate = new Date(this.value);
                if (this.value) {
                    // Set minimum end date to the day after start date
                    const minEndDate = new Date(startDate);
                    minEndDate.setDate(minEndDate.getDate() + 1);
                    endDateInput.min = minEndDate.toISOString().split('T')[0];
                    
                    // If end date is before start date, clear it
                    if (endDateInput.value && new Date(endDateInput.value) <= startDate) {
                        endDateInput.value = '';
                    }
                }
            });

            endDateInput.addEventListener('change', function() {
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(this.value);
                
                if (startDateInput.value && endDate <= startDate) {
                    alert('End date must be after start date!');
                    this.value = '';
                }
            });
        }

        // Form submission validation - ensure safety preference is selected
        form.addEventListener('submit', function(event) {
            if (safetyPreferenceSelect && !safetyPreferenceSelect.value) {
                event.preventDefault();
                alert('Please select a safety level preference.');
                safetyPreferenceSelect.focus();
                return false;
            }

            // Clear localStorage on successful submit
            localStorage.removeItem(storageKey);
        });

        // Load saved form data from localStorage
        const loadFormData = () => {
            const savedData = localStorage.getItem(storageKey);
            if (savedData) {
                const data = JSON.parse(savedData);
                for (const key in data) {
                    const field = form.querySelector(`[name="travel_plan[${key}]"]`);
                    if (field) {
                        field.value = data[key];
                    }
                }
            }
        };

        // Save form data to localStorage
        const saveFormData = () => {
            const formData = new FormData(form);
            const data = {};
            for (let [key, value] of formData.entries()) {
                const match = key.match(/\[(.*?)\]/);
                if (match) {
                    data[match[1]] = value;
                }
            }
            localStorage.setItem(storageKey, JSON.stringify(data));
        };

        loadFormData();
        form.addEventListener('input', saveFormData);
    });
</script>
